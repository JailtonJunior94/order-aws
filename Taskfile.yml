version: '3'

tasks:
  install-linter:
    internal: true
    status:
    - sh -c '{{if ne .latest_lint_version .installed_lint_version}}{{end}}'
    cmds:
    - "echo new golangci-lint version found: {{.latest_lint_version}}"
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $GOPATH/bin latest
    desc: install linter
    silent: true
    vars:
      latest_lint_version:
        sh: curl -s "https://api.github.com/repos/golangci/golangci-lint/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/'
      installed_lint_version:
        sh: golangci-lint --version 2>/dev/null | awk '{print "v"$4}'

  build:
    desc: Build the Go binary
    cmds:
    - go build -o bin/order ./cmd/main.go
    sources:
    - cmd/**/*.go
    - internal/**/*.go
    - pkg/**/*.go
    generates:
    - bin/order

  run:
    desc: Run the application
    deps: [ build ]
    cmds:
    - ./bin/order

  test:
    desc: Run all tests
    cmds:
    - go test ./...

  tidy:
    desc: Clean up go.mod and go.sum
    cmds:
    - go mod tidy

  clean:
    desc: Remove build artifacts
    cmds:
    - rm -rf bin/*

  docker:up:
    desc: Start Docker Compose services
    cmds:
    - docker-compose -f deployment/docker-compose.yml up -d

  docker:down:
    desc: Stop Docker Compose services
    cmds:
    - docker-compose -f deployment/docker-compose.yml down

  fmt:
    desc: Format Go code
    cmds:
    - go fmt ./...

  lint:
    cmds:
    - task: install-linter
    - golangci-lint run
    desc: linter

  terraform:init:
    desc: Initialize Terraform
    dir: deployment/iac
    cmds:
    - terraform init

  terraform:plan:
    desc: Terraform plan
    dir: deployment/iac
    cmds:
    - terraform plan

  terraform:apply:
    desc: Terraform apply
    dir: deployment/iac
    cmds:
    - terraform apply -auto-approve

  terraform:destroy:
    desc: Terraform destroy
    dir: deployment/iac
    cmds:
    - terraform destroy -auto-approve
