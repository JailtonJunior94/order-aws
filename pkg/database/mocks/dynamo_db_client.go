// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package databaseMock

import (
	"context"

	"github.com/jailtonjunior94/order-aws/pkg/database"
	mock "github.com/stretchr/testify/mock"
)

// NewDynamoDBClient creates a new instance of DynamoDBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDynamoDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DynamoDBClient {
	mock := &DynamoDBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DynamoDBClient is an autogenerated mock type for the DynamoDBClient type
type DynamoDBClient struct {
	mock.Mock
}

type DynamoDBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DynamoDBClient) EXPECT() *DynamoDBClient_Expecter {
	return &DynamoDBClient_Expecter{mock: &_m.Mock}
}

// GetItem provides a mock function for the type DynamoDBClient
func (_mock *DynamoDBClient) GetItem(ctx context.Context, key database.DynoNotation) (database.DynoNotation, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 database.DynoNotation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.DynoNotation) (database.DynoNotation, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.DynoNotation) database.DynoNotation); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.DynoNotation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.DynoNotation) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DynamoDBClient_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type DynamoDBClient_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - ctx context.Context
//   - key database.DynoNotation
func (_e *DynamoDBClient_Expecter) GetItem(ctx interface{}, key interface{}) *DynamoDBClient_GetItem_Call {
	return &DynamoDBClient_GetItem_Call{Call: _e.mock.On("GetItem", ctx, key)}
}

func (_c *DynamoDBClient_GetItem_Call) Run(run func(ctx context.Context, key database.DynoNotation)) *DynamoDBClient_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.DynoNotation
		if args[1] != nil {
			arg1 = args[1].(database.DynoNotation)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DynamoDBClient_GetItem_Call) Return(dynoNotation database.DynoNotation, err error) *DynamoDBClient_GetItem_Call {
	_c.Call.Return(dynoNotation, err)
	return _c
}

func (_c *DynamoDBClient_GetItem_Call) RunAndReturn(run func(ctx context.Context, key database.DynoNotation) (database.DynoNotation, error)) *DynamoDBClient_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// PutItem provides a mock function for the type DynamoDBClient
func (_mock *DynamoDBClient) PutItem(ctx context.Context, item database.DynoNotation) error {
	ret := _mock.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for PutItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.DynoNotation) error); ok {
		r0 = returnFunc(ctx, item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DynamoDBClient_PutItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItem'
type DynamoDBClient_PutItem_Call struct {
	*mock.Call
}

// PutItem is a helper method to define mock.On call
//   - ctx context.Context
//   - item database.DynoNotation
func (_e *DynamoDBClient_Expecter) PutItem(ctx interface{}, item interface{}) *DynamoDBClient_PutItem_Call {
	return &DynamoDBClient_PutItem_Call{Call: _e.mock.On("PutItem", ctx, item)}
}

func (_c *DynamoDBClient_PutItem_Call) Run(run func(ctx context.Context, item database.DynoNotation)) *DynamoDBClient_PutItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.DynoNotation
		if args[1] != nil {
			arg1 = args[1].(database.DynoNotation)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DynamoDBClient_PutItem_Call) Return(err error) *DynamoDBClient_PutItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DynamoDBClient_PutItem_Call) RunAndReturn(run func(ctx context.Context, item database.DynoNotation) error) *DynamoDBClient_PutItem_Call {
	_c.Call.Return(run)
	return _c
}
