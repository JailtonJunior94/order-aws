// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package messagingMock

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/sqs/types"
	"github.com/jailtonjunior94/order-aws/pkg/messaging"
	mock "github.com/stretchr/testify/mock"
)

// NewSqsClient creates a new instance of SqsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSqsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SqsClient {
	mock := &SqsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SqsClient is an autogenerated mock type for the SqsClient type
type SqsClient struct {
	mock.Mock
}

type SqsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SqsClient) EXPECT() *SqsClient_Expecter {
	return &SqsClient_Expecter{mock: &_m.Mock}
}

// DeleteMessage provides a mock function for the type SqsClient
func (_mock *SqsClient) DeleteMessage(ctx context.Context, message types.Message) error {
	ret := _mock.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Message) error); ok {
		r0 = returnFunc(ctx, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SqsClient_DeleteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessage'
type SqsClient_DeleteMessage_Call struct {
	*mock.Call
}

// DeleteMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.Message
func (_e *SqsClient_Expecter) DeleteMessage(ctx interface{}, message interface{}) *SqsClient_DeleteMessage_Call {
	return &SqsClient_DeleteMessage_Call{Call: _e.mock.On("DeleteMessage", ctx, message)}
}

func (_c *SqsClient_DeleteMessage_Call) Run(run func(ctx context.Context, message types.Message)) *SqsClient_DeleteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.Message
		if args[1] != nil {
			arg1 = args[1].(types.Message)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SqsClient_DeleteMessage_Call) Return(err error) *SqsClient_DeleteMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SqsClient_DeleteMessage_Call) RunAndReturn(run func(ctx context.Context, message types.Message) error) *SqsClient_DeleteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveMessages provides a mock function for the type SqsClient
func (_mock *SqsClient) ReceiveMessages(ctx context.Context, maxNumberOfMessages int32, handler messaging.ConsumeHandler) error {
	ret := _mock.Called(ctx, maxNumberOfMessages, handler)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32, messaging.ConsumeHandler) error); ok {
		r0 = returnFunc(ctx, maxNumberOfMessages, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SqsClient_ReceiveMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveMessages'
type SqsClient_ReceiveMessages_Call struct {
	*mock.Call
}

// ReceiveMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - maxNumberOfMessages int32
//   - handler messaging.ConsumeHandler
func (_e *SqsClient_Expecter) ReceiveMessages(ctx interface{}, maxNumberOfMessages interface{}, handler interface{}) *SqsClient_ReceiveMessages_Call {
	return &SqsClient_ReceiveMessages_Call{Call: _e.mock.On("ReceiveMessages", ctx, maxNumberOfMessages, handler)}
}

func (_c *SqsClient_ReceiveMessages_Call) Run(run func(ctx context.Context, maxNumberOfMessages int32, handler messaging.ConsumeHandler)) *SqsClient_ReceiveMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		var arg2 messaging.ConsumeHandler
		if args[2] != nil {
			arg2 = args[2].(messaging.ConsumeHandler)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *SqsClient_ReceiveMessages_Call) Return(err error) *SqsClient_ReceiveMessages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SqsClient_ReceiveMessages_Call) RunAndReturn(run func(ctx context.Context, maxNumberOfMessages int32, handler messaging.ConsumeHandler) error) *SqsClient_ReceiveMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function for the type SqsClient
func (_mock *SqsClient) SendMessage(ctx context.Context, message types.Message) error {
	ret := _mock.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Message) error); ok {
		r0 = returnFunc(ctx, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SqsClient_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type SqsClient_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.Message
func (_e *SqsClient_Expecter) SendMessage(ctx interface{}, message interface{}) *SqsClient_SendMessage_Call {
	return &SqsClient_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, message)}
}

func (_c *SqsClient_SendMessage_Call) Run(run func(ctx context.Context, message types.Message)) *SqsClient_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.Message
		if args[1] != nil {
			arg1 = args[1].(types.Message)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SqsClient_SendMessage_Call) Return(err error) *SqsClient_SendMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SqsClient_SendMessage_Call) RunAndReturn(run func(ctx context.Context, message types.Message) error) *SqsClient_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}
