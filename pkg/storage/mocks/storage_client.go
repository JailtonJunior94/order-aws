// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storageMock

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewStorageClient creates a new instance of StorageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageClient {
	mock := &StorageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StorageClient is an autogenerated mock type for the StorageClient type
type StorageClient struct {
	mock.Mock
}

type StorageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageClient) EXPECT() *StorageClient_Expecter {
	return &StorageClient_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function for the type StorageClient
func (_mock *StorageClient) GetObject(ctx context.Context, key string) ([]byte, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StorageClient_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type StorageClient_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *StorageClient_Expecter) GetObject(ctx interface{}, key interface{}) *StorageClient_GetObject_Call {
	return &StorageClient_GetObject_Call{Call: _e.mock.On("GetObject", ctx, key)}
}

func (_c *StorageClient_GetObject_Call) Run(run func(ctx context.Context, key string)) *StorageClient_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *StorageClient_GetObject_Call) Return(bytes []byte, err error) *StorageClient_GetObject_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *StorageClient_GetObject_Call) RunAndReturn(run func(ctx context.Context, key string) ([]byte, error)) *StorageClient_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function for the type StorageClient
func (_mock *StorageClient) PutObject(ctx context.Context, key string, body io.Reader) error {
	ret := _mock.Called(ctx, key, body)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader) error); ok {
		r0 = returnFunc(ctx, key, body)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StorageClient_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type StorageClient_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - body io.Reader
func (_e *StorageClient_Expecter) PutObject(ctx interface{}, key interface{}, body interface{}) *StorageClient_PutObject_Call {
	return &StorageClient_PutObject_Call{Call: _e.mock.On("PutObject", ctx, key, body)}
}

func (_c *StorageClient_PutObject_Call) Run(run func(ctx context.Context, key string, body io.Reader)) *StorageClient_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StorageClient_PutObject_Call) Return(err error) *StorageClient_PutObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StorageClient_PutObject_Call) RunAndReturn(run func(ctx context.Context, key string, body io.Reader) error) *StorageClient_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// SignedURL provides a mock function for the type StorageClient
func (_mock *StorageClient) SignedURL(ctx context.Context, key string, expireInSeconds int64) (string, error) {
	ret := _mock.Called(ctx, key, expireInSeconds)

	if len(ret) == 0 {
		panic("no return value specified for SignedURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) (string, error)); ok {
		return returnFunc(ctx, key, expireInSeconds)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) string); ok {
		r0 = returnFunc(ctx, key, expireInSeconds)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = returnFunc(ctx, key, expireInSeconds)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StorageClient_SignedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignedURL'
type StorageClient_SignedURL_Call struct {
	*mock.Call
}

// SignedURL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expireInSeconds int64
func (_e *StorageClient_Expecter) SignedURL(ctx interface{}, key interface{}, expireInSeconds interface{}) *StorageClient_SignedURL_Call {
	return &StorageClient_SignedURL_Call{Call: _e.mock.On("SignedURL", ctx, key, expireInSeconds)}
}

func (_c *StorageClient_SignedURL_Call) Run(run func(ctx context.Context, key string, expireInSeconds int64)) *StorageClient_SignedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StorageClient_SignedURL_Call) Return(s string, err error) *StorageClient_SignedURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *StorageClient_SignedURL_Call) RunAndReturn(run func(ctx context.Context, key string, expireInSeconds int64) (string, error)) *StorageClient_SignedURL_Call {
	_c.Call.Return(run)
	return _c
}
